#!/bin/bash
leader=""
user=""
id=""
participants=""
if [ -f ./config ]; then
  source ./config
fi
SUBCOMMAND=$1
ARGUMENTS=${@:2}
ARGUMENTS_MISS2=${@:3}
case $SUBCOMMAND in 
  size)
    GetSize $ARGUMENTS
    ;;
  lead)
    demo=false
    OPTIND=2
    while getopts ":dh[h:help?Show help messages.]" opt; do 
      case $opt in 
        d) 
          demo=true
          ;;
        h) 
          printf "This command will run a leader node.\nUse -d to run a demo\n"
          exit 1
          ;;
      esac
    done
    if [[ $3 -eq "help" ]]; then 
      printf "This command will run a leader node.\nUse -d to run a demo\n"
      exit 1
    fi
    if $demo; then
      lead $ARGUMENTS_MISS2 ${participants[*]}
    else 
      TestLeader $ARGUMENTS ${participants[*]}
    fi
    ;;
  part)
    OPTIND=2
    synced=false
    while getopts "r:u:" opt; do 
      case $opt in 
        r) 
          printf "\e[1;34m[LOGAN]\e[0;39m Syncing Git\n"
          sync_git $OPTARG
          synced=true
          printf "\e[1;34m[LOGAN]\e[0;39m Finished Syncing Git\nPress enter to continue"
          while true; do 
            read -s -n 1 key
            if [[ $key = "" ]]; then 
              break
            fi
          done
          ;;
      esac
    done
    if [[( ! (-z "$leader") ) && ( ! $synced  )]]; then 
      printf "\e[1;34m[LOGAN]\e[0;39m Syncing Git\n"
      sync_git $leader
      printf "\e[1;34m[LOGAN]\e[0;39m Finished Syncing Git\nPress enter to continue"
      while true; do 
        read -s -n 1 key
        if [[ $key = "" ]]; then 
          break
        fi
      done
    fi
    if [[ ! (-z "$leader")]]; then
      ARGUMENTS="$ARGUMENTS -r $leader"
    fi
    if [[ ! (-z "$user")]]; then
      ARGUMENTS="$ARGUMENTS -u $user"
    fi
    part $ARGUMENTS
    ;;
  print)
    if [[( ! (-z "$user") )]]; then
      ARGUMENTS="$ARGUMENTS -u $user"
    fi
    if [[( ! (-z "$participants") )]]; then
      ARGUMENTS="$ARGUMENTS -m ${participants[*]}"
    fi
    PrintBlockchains $ARGUMENTS
    ;;
  gather)
    GatherResults $ARGUMENTS
    ;;
  test)
  OPTIND=2
  synced=false
    while getopts "r:i:s:u:" opt; do 
      case $opt in 
        r) 
          printf "\e[1;34m[LOGAN]\e[0;39m Syncing Git\n"
          sync_git $OPTARG
          synced=true
          printf "\e[1;34m[LOGAN]\e[0;39m Finished Syncing Git\nPress enter to continue"
          while true; do 
            read -s -n 1 key
            if [[ $key = "" ]]; then 
              break
            fi
          done
          ;;
      esac
    done
    if [[( ! (-z "$leader") ) && ( ! $synced  )]]; then 
      printf "\e[1;34m[LOGAN]\e[0;39m Syncing Git\n"
      sync_git $leader
      printf "\e[1;34m[LOGAN]\e[0;39m Finished Syncing Git\nPress enter to continue"
      while true; do 
        read -s -n 1 key
        if [[ $key = "" ]]; then 
          break
        fi
      done
    fi
    if [[ ! (-z "$leader")]]; then
      ARGUMENTS="$ARGUMENTS -r $leader"
    fi
    if [[ ! (-z "$user")]]; then
      ARGUMENTS="$ARGUMENTS -u $user"
    fi
    if [[ ! (-z "$id")]]; then
      ARGUMENTS="$ARGUMENTS -i $id"
    fi
    ThroughputLatencyTester $ARGUMENTS
    ;;
  add)
    OPTIND=2
    synced=false
    while getopts "d:n:i:s:u:r:" opt; do 
      case $opt in 
        r) 
          printf "\e[1;34m[LOGAN]\e[0;39m Syncing Git\n"
          sync_git $OPTARG
          synced=true
          printf "\e[1;34m[LOGAN]\e[0;39m Finished Syncing Git\nPress enter to continue"
          while true; do 
            read -s -n 1 key
            if [[ $key = "" ]]; then 
              break
            fi
          done
          ;;
      esac
    done
    if [[( ! (-z "$leader") ) && ( ! $synced  )]]; then 
      printf "\e[1;34m[LOGAN]\e[0;39m Syncing Git\n"
      sync_git $leader
      printf "\e[1;34m[LOGAN]\e[0;39m Finished Syncing Git\nPress enter to continue"
      while true; do 
        read -s -n 1 key
        if [[ $key = "" ]]; then 
          break
        fi
      done
    fi
    if [[ ! (-z "$leader")]]; then
      ARGUMENTS="$ARGUMENTS -r $leader"
    fi
    if [[ ! (-z "$user")]]; then
      ARGUMENTS="$ARGUMENTS -u $user"
    fi
    if [[ ! (-z "$id")]]; then
      ARGUMENTS="$ARGUMENTS -i $id"
    fi
    AddNumberToBlockchain $ARGUMENTS
    ;;
  help|-help|--help)
    printf "\nLOGAN - A Blockchain Library built in OCaml\n\n\
COMMANDS\n\
    lead          Run a Leader node (-d for demo mode)\n\
    part          Run a Participant node\n\
    size          Print the size of the blockchain and/or mempools\n\
    print         Print the contents of the blockchain and/or mempools\n\
    test          Run a Logan test program\n\
    gather        Gather test program results for analysis\n\n\
CONFIG\n\
Specify default values of common flags by adding a file named 'config' to your working directory.\n\
It may contain any of the following...\n\
    user=user@host\n\
    leader=leaderuser@leaderhost\n\
    id=5\n\
    participants=(user1@host1 user@host2)\n"
    ;;
esac