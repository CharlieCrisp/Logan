#!/bin/bash
if [ -f ./config ]; then
  source ./config
fi
SUBCOMMAND=$1
ARGUMENTS=${@:2}
ARGUMENTS_MISS2=${@:3}
case $SUBCOMMAND in 
  size)
    GetSize $ARGUMENTS
    ;;
  lead)
    demo=false
    OPTIND=2
    while getopts "d" opt; do 
      case $opt in 
        d) 
          demo=true
          ;;
      esac
    done
    if $demo; then
      lead $ARGUMENTS_MISS2 ${participants[*]}
    else 
      TestLeader $ARGUMENTS ${participants[*]}
    fi
    ;;
  part)
    OPTIND=2
    while getopts "r:u:" opt; do 
      case $opt in 
        r) 
          printf "\e[1;34m[LOGAN]\e[0;39m Syncing Git\n"
          sync_git $OPTARG
          printf "\e[1;34m[LOGAN]\e[0;39m Finished Syncing Git\nPress enter to continue"
          while true; do 
            read -s -n 1 key
            if [[ $key = "" ]]; then 
              break
            fi
          done
          ;;
      esac
    done
    part $ARGUMENTS $leader $user
    ;;
  print)
    PrintBlockchains $ARGUMENTS
    ;;
  gather)
    GatherResults $ARGUMENTS
    ;;
  test)
  OPTIND=2
    while getopts "r:i:s:u:" opt; do 
      case $opt in 
        r) 
          printf "\e[1;34m[LOGAN]\e[0;39m Syncing Git\n"
          sync_git $OPTARG
          printf "\e[1;34m[LOGAN]\e[0;39m Finished Syncing Git\nPress enter to continue"
          while true; do 
            read -s -n 1 key
            if [[ $key = "" ]]; then 
              break
            fi
          done
          ;;
      esac
    done
    ThroughputLatencyTester $ARGUMENTS $leader $user $id
    ;;
  add)
    OPTIND=2
      while getopts "d:n:i:s:u:r:" opt; do 
        case $opt in 
          r) 
            printf "\e[1;34m[LOGAN]\e[0;39m Syncing Git\n"
            sync_git $OPTARG
            printf "\e[1;34m[LOGAN]\e[0;39m Finished Syncing Git\nPress enter to continue"
            while true; do 
              read -s -n 1 key
              if [[ $key = "" ]]; then 
                break
              fi
            done
            ;;
        esac
      done
    AddNumberToBlockchain $ARGUMENTS  $leader $user $id
    ;;
  help|-help|--help)
    printf "\nLOGAN - A Blockchain Library built in OCaml\n\n\
SUBCOMMANDS\n\n\
lead          Run a Leader node (-d for demo mode)\n\
part          Run a Participant node\n\
size          Print the size of the blockchain and/or mempools\n\
print         Print the contents of the blockchain and/or mempools\n\
test          Run a Logan test program\n\
gather        Gather test program results for analysis\n\n\
CONFIG\n\n\
Specify default values of common flags by adding a file named 'config' to your working directory.\n\
It may contain any of the following...\n\n\
user=user@host\n\
leader=leaderuser@leaderhost\n\
id=5\n\
participants=(user1@host1 user@host2)\n\n"
    ;;
esac